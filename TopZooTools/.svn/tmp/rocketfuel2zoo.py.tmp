#! /usr/bin/env python

from pyparsing import Word, alphas, nums, OneOrMore, Literal, Group, Optional
import networkx as nx
import optparse
import os
import glob
import re
import sys

#TODO: add logging support

opt = optparse.OptionParser()
opt.add_option('--directory', '-d', help="process directory")
#TODO: make this required if using geocoding
opt.add_option('--geocode', '-g',  action="store_true",
                default=False,
                help="Attempt to lookup co-ordinates")
opt.add_option('--geonames_username', '-u', 
                default=False,
                help="Username for Geonames web service")
opt.add_option('--skip_cache',  action="store_true",
                default=False,
                help="Don't use cache for geocoding")

options = opt.parse_args()[0]


#TODO: make this a callback function for verification
if options.geocode and not options.geonames_username:
    print "Please enter a Geonames username to use geocoding"
    sys.exit(0)

directory = options.directory + os.sep
all_folders = glob.glob(directory + "*")

if options.geocode:
    from geocoder import Geocoder
    geocoder = Geocoder(options.geonames_username, options.skip_cache)


for folder in all_folders:
    if not os.path.isdir(folder):
        continue
    #tODO: allow support for specifying the edge file directly

    # Check valid format of x:y where x, y are valid ASNs
    (_, data_folder) = os.path.split(folder)
    if not re.match("\d+:\d+", data_folder):
        continue

    # Only do internal topologies
    (asn_a, asn_b) = data_folder.split(":")
    if asn_a != asn_b:
        continue

    G = nx.Graph()

    #TODO: check on bidirectionality
    #TODO: download file if not present
    #TODO: add pyparsing to topzootools dependencies for Pypi

    # Definitions for parsing
    colon = Literal(":").suppress()
    #TODO: see if comma built in
    comma = Literal(",").suppress()
    arrow = Literal("->").suppress()
    ASN = Word(nums)
    ObsCount = Word(nums)
    # Can have . eg St. Louis
    place_name = Group(
        OneOrMore(Word(alphas+".")) 
        + Optional(comma) +
        Optional(Word(alphas)))

    node = Group(ASN + colon + place_name)
    entry = (node + arrow + node + ObsCount)

    filename = folder + os.sep + "edges"
    f = open(filename)

    #ToDO; print unparsed lines

    #ToDo: push all into dict and use add_nodes_from and add_edges_from

    for line in f:
        print line
        processed = entry.parseString(line)
        #print processed
        (src, dst, obs_count) = processed
        src_asn, src_place = src
        dst_asn, dst_place = dst
        src_place = " ".join(src_place)
        dst_place = " ".join(dst_place)
        # Use simple string for ID (not list returned from Pyparsing which don't
        # always hash the same
        src_id = "%s %s" % (src_place, src_asn)
        dst_id = "%s %s" % (dst_place, dst_asn)
        # use full hash for node id
        G.add_node(src_id, ASN=int(src_asn), label =src_place )
        G.add_node(dst_id, ASN=int(dst_asn), label=dst_place )
        G.add_edge(src_id, dst_id, obs_count = int(obs_count))

    f.close()

    # Relabel nodes to have id based on index

    if options.geocode:
            G = geocoder.geocode(G)
            geocoder.save_cache()


    G.name = data_folder
    G.graph['Creator'] = 'rocketfuel2zoo'

    #import pprint
    #pprint.pprint( sorted(G.nodes()))
    #pprint.pprint( G.nodes(data=True))
    out_file = "%s.gml" % data_folder.replace(":", "_")
    nx.write_gml(G, out_file)
